<!doctype html>
<html lang="en">

<head>
	<title>O'Reilly Introduction to WebRTC</title>
	<link rel="stylesheet" type="text/css" href="styles.css">
	<script src="/socket.io/socket.io.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/recordrtc"></script>
	<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.5/socket.io.js"></script> -->
</head>

<body>
	<video id="myVideoTag" autoplay></video>
	<video id="theirVideoTag" autoplay></video>
	<div>
		<button type="button" id="rtcBtn" data-state=true>Record the video</button>
		<label>Your Name</label><input id="myName" type="text" />
		<label>Message</label><input id="myMessage" type="text" />
		<input id="sendMessage" type="submit" />
		<div id="chatArea">Message Output:</br></div>
		<div id="signalingArea">Signaling Messages:</br></div>
	</div>

	<script>
		var myVideoArea = document.querySelector("#myVideoTag");
		var theirVideoArea = document.querySelector("#theirVideoTag");
		var myName = document.querySelector("#myName");
		var myMessage = document.querySelector("#myMessage");
		var sendMessage = document.querySelector("#sendMessage");
		var chatArea = document.querySelector("#chatArea");
		var signalingArea = document.querySelector("#signalingArea");
		var rtcBtn = document.querySelector("#rtcBtn");
		var globalStream = null;

		// record related code starts

		rtcBtn.addEventListener('click', (e) => {
			let recorder = new RecordRTCPromisesHandler(globalStream, {
				type: 'video'
			});

			if (rtcBtn.dataset.state === "true") {
				e.value = "Stop Recording";
				e.data.state = "false";
				recorder.startRecording()
					.then((e) => {
						console.log("started");
					})
					.catch(() => {
						console.log("started error");
					});
			} else {
				recorder.stopRecording()
					.then(() => {
						recorder.getBlob()
							.then(() => {
								invokeSaveAsDialog(blob);
							})
							.catch((e) => {
								console.log(e);
							})
					})
					.catch((e) => {
						console.log(e);
					});
			}
		})

		/// ends
		var ROOM = "chat";
		var SIGNAL_ROOM = "signal_room";
		var configuration = {
			'iceServer': [{
				'url': 'stun:stun.l.google.com:19302'
			}]
		};
		var rtcPeerConn;

		io = io.connect();
		io.emit('ready', { "chat_room": ROOM, "signal_room": SIGNAL_ROOM });

		//Send a first signaling message to anyone listening
		//This normally would be on a button click
		io.emit('signal', { "type": "user_here", "message": "Are you ready for a call?", "room": SIGNAL_ROOM });

		io.on('signaling_message', function (data) {
			displaySignalMessage("Signal received: " + data.type);

			//Setup the RTC Peer Connection object
			if (!rtcPeerConn)
				startSignaling();

			if (data.type != "user_here") {
				var message = JSON.parse(data.message);
				if (message.sdp) {
					// rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {
					// 	// if we received an offer, we need to answer
					// 	if (rtcPeerConn.remoteDescription.type == 'offer') {
					// 		rtcPeerConn.createAnswer(sendLocalDesc, logError);
					// 	}
					// }, logError);

					rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp))
						.then(() => {
							if (rtcPeerConn.remoteDescription.type == 'offer') {

								// rtcPeerConn.createAnswer(sendLocalDesc, logError);

								rtcPeerConn.createAnswer()
									.then((desc) => {
										sendLocalDesc(desc);
									})
									.catch((e) => {
										console.log(e);
									})
							}
						})
						.catch((e) => {
							console.log(e);
						})

				}
				else {
					// rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));

					rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate))
						.catch((e) => {
							console.log(e);
						});

				}
			}

		});

		function startSignaling() {
			displaySignalMessage("starting signaling...");

			rtcPeerConn = new RTCPeerConnection(configuration);

			// send any ice candidates to the other peer
			rtcPeerConn.onicecandidate = function (evt) {
				if (evt.candidate)
					io.emit('signal', { "type": "ice candidate", "message": JSON.stringify({ 'candidate': evt.candidate }), "room": SIGNAL_ROOM });
				displaySignalMessage("completed that ice candidate...");
			};

			// let the 'negotiationneeded' event trigger offer generation
			rtcPeerConn.onnegotiationneeded = function () {
				displaySignalMessage("on negotiation called");
				// rtcPeerConn.createOffer(sendLocalDesc, logError);
				rtcPeerConn.createOffer()
					.then((desc) => {
						sendLocalDesc(desc);
					})
					.catch((e) => {
						console.log(e);
					});
			}

			// once remote stream arrives, show it in the remote video element
			rtcPeerConn.ontrack = function (evt) {
				displaySignalMessage("going to add their stream...");
				// theirVideoArea.src = URL.createObjectURL(evt.stream);
				globalStream = evt.streams[0];
				theirVideoArea.srcObject = evt.streams[0];
			};

			// get a local stream, show it in our video tag and add it to be sent
			navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.mediaDevices.getUserMedia;


			var constraints = {
				audio: true,
				video: {
					mandatory: {
						minWidth: 240,
						maxWidth: 240,
						minHeight: 240,
						maxHeight: 240
					}

				}
			};
			var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
			if (!isSafari) {
				navigator.getUserMedia(constraints, function (stream) {
					displaySignalMessage("going to display my stream...");
					//myVideoArea.src = URL.createObjectURL(stream);
					myVideoArea.srcObject = stream;
					stream.getTracks().forEach((tracks) => { rtcPeerConn.addTrack(tracks, stream) });
				}, logError);
			} else {
				navigator.mediaDevices.getUserMedia(constraints)
					.then((stream) => {
						try {
							displaySignalMessage("going to display my stream...");
							//myVideoArea.src = URL.createObjectURL(stream);
							myVideoArea.srcObject = stream;
							stream.getTracks().forEach((tracks) => { rtcPeerConn.addTrack(tracks, stream) });
						} catch (e) {
							console.log(e);
						}
					})
					.catch(err => { logError(err) });
			}

		}

		function onSuccess(stream) {
			console.log("Success! We have a stream!");
			//videoArea.src = window.URL.createObjectURL(stream);
			myVideoArea.className = "grayscale_filter";
			myVideoArea.srcObject = stream;
			myVideoArea.play();
		}

		function sendLocalDesc(desc) {
			// rtcPeerConn.setLocalDescription(desc, function () {
			// 	displaySignalMessage("sending local description");
			// 	io.emit('signal', { "type": "SDP", "message": JSON.stringify({ 'sdp': rtcPeerConn.localDescription }), "room": SIGNAL_ROOM });
			// }, logError);

			rtcPeerConn.setLocalDescription(desc)
				.then(() => {
					displaySignalMessage("sending local description");
					io.emit('signal', { "type": "SDP", "message": JSON.stringify({ 'sdp': rtcPeerConn.localDescription }), "room": SIGNAL_ROOM });
				})
				.catch((e) => {
					console.log(e);
				});
		}

		function logError(error) {
			displaySignalMessage(error.name + ': ' + error.message);
		}

		io.on('announce', function (data) {
			displayMessage(data.message);
		});

		io.on('message', function (data) {
			displayMessage(data.author + ": " + data.message);
		});

		function displayMessage(message) {
			chatArea.innerHTML = chatArea.innerHTML + "<br/>" + message;
		}

		function displaySignalMessage(message) {
			signalingArea.innerHTML = signalingArea.innerHTML + "<br/>" + message;
		}

		sendMessage.addEventListener('click', function (ev) {
			io.emit('send', { "author": myName.value, "message": myMessage.value, "room": ROOM });
			ev.preventDefault();
		}, false);



	</script>
</body>

</html>